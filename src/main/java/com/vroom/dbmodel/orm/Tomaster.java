package com.vroom.dbmodel.orm;
// Generated Dec 16, 2018 5:36:11 PM by Hibernate Tools 5.2.0.Final


import com.fasterxml.jackson.annotation.JsonFormat;
import com.vroom.dataservice.common.InventoryTransferType;
import com.vroom.dataservice.common.Region;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.hibernate.annotations.Where;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.persistence.Entity;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Tomaster generated by hbm2java
 */
@Entity
@Table(name="tomaster"
    ,catalog="yaqeen"
)
public class Tomaster  implements java.io.Serializable {


     private Integer id;
     private Users users;

    @Enumerated
    @Column(columnDefinition = "int")
     private Region fromregion;

    @Enumerated
    @Column(columnDefinition = "int")
     private InventoryTransferType transfertype;

    @Enumerated
    @Column(columnDefinition = "int")
     private Region toregion;

     private Integer modifiedbyuserid;
     private Date modifiedtime;
     private Date insertedtime;
     private Boolean isdeleted;

    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    private Set<Todetail> todetail = new HashSet<>(0);

    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    private Set<Tostatus> tostatus = new HashSet<>(0);

    public Tomaster() {
    }

	
    public Tomaster(Users users, Region fromregion, InventoryTransferType transfertype, Region toregion) {
        this.users = users;
        this.fromregion = fromregion;
        this.transfertype = transfertype;
        this.toregion = toregion;
    }
    public Tomaster(Users users, Region fromregion, InventoryTransferType transfertype, Region toregion, Integer modifiedbyuserid, Date modifiedtime, Date insertedtime, Boolean isdeleted) {
       this.users = users;
       this.fromregion = fromregion;
       this.transfertype = transfertype;
       this.toregion = toregion;
       this.modifiedbyuserid = modifiedbyuserid;
       this.modifiedtime = modifiedtime;
       this.insertedtime = insertedtime;
       this.isdeleted = isdeleted;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }


    @OneToMany(cascade = CascadeType.ALL,
            mappedBy="toMaster")
    public Set<Todetail> getTodetail(){
        return this.todetail;
    }

    public void setTodetail(Set<Todetail> todetail){
        this.todetail = todetail;
    }

    @OneToMany(cascade = CascadeType.ALL,
            mappedBy="toMaster")
    @Where(clause = "isactive = true")
    public Set<Tostatus> getTostatus(){
        return this.tostatus;
    }

    public void setTostatus(Set<Tostatus> tostatus){
        this.tostatus = tostatus;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="userid", nullable=false)
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }

    
    @Column(name="fromregion", nullable=false)
    public Region getFromregion() {
        return this.fromregion;
    }
    
    public void setFromregion(Region fromregion) {
        this.fromregion = fromregion;
    }

    
    @Column(name="transfertype", nullable=false)
    public InventoryTransferType getTransfertype() {
        return this.transfertype;
    }
    
    public void setTransfertype(InventoryTransferType transfertype) {
        this.transfertype = transfertype;
    }

    
    @Column(name="toregion", nullable=false)
    public Region getToregion() {
        return this.toregion;
    }
    
    public void setToregion(Region toregion) {
        this.toregion = toregion;
    }

    
    @Column(name="modifiedbyuserid")
    public Integer getModifiedbyuserid() {
        return this.modifiedbyuserid;
    }
    
    public void setModifiedbyuserid(Integer modifiedbyuserid) {
        this.modifiedbyuserid = modifiedbyuserid;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="modifiedtime", length=10)
    public Date getModifiedtime() {
        return this.modifiedtime;
    }
    
    public void setModifiedtime(Date modifiedtime) {
        this.modifiedtime = modifiedtime;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="insertedtime", length=10)
    public Date getInsertedtime() {
        return this.insertedtime;
    }
    
    public void setInsertedtime(Date insertedtime) {
        this.insertedtime = insertedtime;
    }

    
    @Column(name="isdeleted")
    public Boolean getIsdeleted() {
        return this.isdeleted;
    }
    
    public void setIsdeleted(Boolean isdeleted) {
        this.isdeleted = isdeleted;
    }

    @Transient
    public String getToId(){
        return "TO-" + this.getId() + "-" + DateFormatUtils.format(this.insertedtime, "yyyy");
    }

    @Transient
    public String getToStatusType(){
        Tostatus tStatus = new Tostatus();
        if(this.tostatus != null){
            tStatus = this.tostatus.stream().filter(ts -> ts.getIsactive()).findFirst().orElse(null);
        }
        return (tStatus != null) ? tStatus.getTostatusType().getName() : "";
    }

    @Transient
    public int getTotalProducts(){
        return ((this.todetail != null) || !(this.todetail.isEmpty())) ?
                this.getTodetail().size() :  0;
    }

    @Transient
    public int getTotalQuantity(){
        int quantity = 0;
        if ((this.todetail != null) || !(this.todetail.isEmpty())) {
            quantity = this.todetail.stream().map(tod -> tod.getQuantity()).reduce(0, Integer::sum);
        }
        return quantity;
    }
}


